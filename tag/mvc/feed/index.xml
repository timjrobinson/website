<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>mvc &#8211; TimJRobinson</title>
	<atom:link href="/tag/mvc/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Always be learning</description>
	<lastBuildDate>Thu, 12 Jun 2014 15:32:02 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.1.1</generator>
	<item>
		<title>How to structure your NodeJS Models</title>
		<link>/how-to-structure-your-nodejs-models-2/</link>
					<comments>/how-to-structure-your-nodejs-models-2/#comments</comments>
		
		<dc:creator><![CDATA[Tim Robinson]]></dc:creator>
		<pubDate>Thu, 12 Jun 2014 15:32:02 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[app structure]]></category>
		<category><![CDATA[mvc]]></category>
		<category><![CDATA[programming]]></category>
		<guid isPermaLink="false">http://ec2-52-36-187-147.us-west-2.compute.amazonaws.com/how-to-structure-your-nodejs-models-2/</guid>

					<description><![CDATA[In MVC your models are objects that save out to the data store and do basic low level manipulations on your data. Over the past few years I&#8217;ve worked with many different ways of structuring models and have finally come to a solution I feel is elegant, simple and easy to understand. It&#8217;s the exact <a class="read-more" href="/how-to-structure-your-nodejs-models-2/">&#8230;&#160;<span class="meta-nav">&#8594;</span></a>]]></description>
										<content:encoded><![CDATA[<p>In MVC your models are objects that save out to the data store and do basic low level manipulations on your data. Over the past few years I&#8217;ve worked with  many different ways of structuring models and have finally come to a solution I feel is elegant, simple and easy to understand. It&#8217;s the exact structure I use for <a href="http://www.towerstorm.com/">Tower Storm</a> and it&#8217;s based mainly off the way the <a href="https://www.npmjs.org/package/mongoose">mongoose</a> npm package works.</p>
<p>Here&#8217;s an example of the most common model of all time: User. The database functions in these examples are all psudocode but should be pretty self explanitory as to what they&#8217;re doing. You can get a copy of the source code at <a href="https://github.com/timjrobinson/nodejsmodels">https://github.com/timjrobinson/nodejsmodels</a></p>
<p>The trouble with writing models is sometimes you want an instance of an object which you can change. Like you want to change a specific users username. And other times you want to get all users of a specific type. But you don&#8217;t want the method for fetching users to be part of each user because that doesn&#8217;t make any sense.</p>
<pre><code>/** user.js **/

var User = function (data) {
this.data = data;
}

User.prototype.data = {}

User.prototype.changeName = function (name) {
this.data.name = name;
}

User.findById = function (id, callback) {
db.get('users', {id: id}).run(function (err, data) {
if (err) return callback(err);
callback(null, new User(data));
});
}

module.exports = User;

</code></pre>
<p>So what we&#8217;ve done is created a User class that can both be an instance of a user and has a static method to find users. This means you can use the same User model to do anything you need to do with users. Each user also has a data object. This is where any data that should be saved back to the database is stored. Here&#8217;s an example of how you&#8217;d use it:</p>
<pre><code>/** app.js **/

User = require("./user.js")

var toby = new User({name: "Toby"});

User.findById(42, function (err, user) {
user.changeName("Brian");
});
</code></pre>
<p>We first created a user called Toby. Then we found a user of id 42 from the database and once it was returned we changed that users name to Brian.</p>
<p>Now a model like this is still missing quite a few important features. Firstly it can&#8217;t save out to the database, lets fix that with a save function:</p>
<pre><code>/** user.js **/

User.prototype.save = function (callback) {
var self = this;
db.get('users', {id: this.data.id}).update(JSON.stringify(this.data)).run(function (err, result) {
if (err) return callback(err);
callback(null, self); 
});
}
</code></pre>
<p>This is why we stored all the users data in this.data rather than straight onto the user. Because it makes saving and loading the user from the database super easy. You just stringify it to save and do new User(data) when loading.</p>
<p>Now it&#8217;s bad practice to access all it&#8217;s data by changing user.data.something and sometimes you may forget and wonder why user.name is always undefined when the user clearly has a name. So lets add getters and setters to the model.</p>
<pre><code>/** user.js **/

User.prototype.get = function (name) {
return this.data[name];
}

User.prototype.set = function (name, value) {
this.data[name] = value;
}
</code></pre>
<p>I also like to enforce some sort of database schema. Otherwise with many developers on a team it&#8217;ll be hard to keep track of all the different variables the user could have.</p>
<pre><code>/** schemas.js **/

schemas = {
user: {
id: null,
name: null,
password: null
}
}

module.exports = schemas;
</code></pre>
<pre><code>/** user.js **/

var schemas = require("./schemas.js");
var _ = require("lodash");

User.prototype.sanitize = function (data) {
data = data || {};
schema = schemas.user;
return _.pick(_.defaults(data, schema), _.keys(schema)); 
}
</code></pre>
<p>That last line in sanitize uses a couple of lodash functions to only keep variables that are in the user schema. &#95;.defaults merges all variables from schemas.user into data that don&#8217;t exist already. &#95;.keys gets all the keys from the schema. &#95;.pick only keeps the variables who&#8217;s names were returned by &#95;.keys. Basically it ensures this.data matches our schema exactly.</p>
<p>Now we can use this sanitize function both in the constructor of user and also before saving. That way every user will look exactly the same in the database with no stray data. Here&#8217;s what these functions look like now:</p>
<pre><code>user.js

var User = function (data) {
this.data = this.sanitize(data);
}

User.prototype.save = function (callback) {
var self = this;
this.data = this.sanitize(this.data);
db.get('users', {id: this.data.id}).update(JSON.stringify(this.data)).run(function (err, result) {
if (err) return callback(err);
callback(null, self); 
});
}
</code></pre>
<p>We now have an easy to use User model that can retrieve users from the database, change their properties and save them back with all data being sanitized and checked automatically.</p>
<p>Now many of our models will use similar functions for get/set/save/sanitize. So instead of copy and pasting code you should create a generic model that you can extend all your other models from. Inheritence is kind of tricky to implement with Javascript so unless you&#8217;re an amazing coder I&#8217;d recommend looking into <a href="http://www.joezimjs.com/javascript/javascript-prototypal-inheritance-and-what-es6-classes-have-to-say-about-it/">es6&#8217;s classes</a> or using <a href="http://www.coffeescript.org/">coffeescript</a>, which is what I use for Tower Storm.</p>
<p>You can download and play with all the source code (including a little mock database for getting and saving data) for the tutorial at: <a href="https://github.com/timjrobinson/nodejsmodels">https://github.com/timjrobinson/nodejsmodels</a></p>
<p>Let me know if you have any questions or feel this model structure could be improved.</p>
<p><a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=%2Fhow-to-structure-your-nodejs-models-2%2F&amp;linkname=How%20to%20structure%20your%20NodeJS%20Models" title="Facebook" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=%2Fhow-to-structure-your-nodejs-models-2%2F&amp;linkname=How%20to%20structure%20your%20NodeJS%20Models" title="Reddit" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=%2Fhow-to-structure-your-nodejs-models-2%2F&amp;linkname=How%20to%20structure%20your%20NodeJS%20Models" title="Twitter" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_pocket" href="https://www.addtoany.com/add_to/pocket?linkurl=%2Fhow-to-structure-your-nodejs-models-2%2F&amp;linkname=How%20to%20structure%20your%20NodeJS%20Models" title="Pocket" rel="nofollow noopener" target="_blank"></a><a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=%2Fhow-to-structure-your-nodejs-models-2%2F&amp;linkname=How%20to%20structure%20your%20NodeJS%20Models" title="Email" rel="nofollow noopener" target="_blank"></a><a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=%2Fhow-to-structure-your-nodejs-models-2%2F&#038;title=How%20to%20structure%20your%20NodeJS%20Models" data-a2a-url="/how-to-structure-your-nodejs-models-2/" data-a2a-title="How to structure your NodeJS Models"></a></p>]]></content:encoded>
					
					<wfw:commentRss>/how-to-structure-your-nodejs-models-2/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
	</channel>
</rss>
